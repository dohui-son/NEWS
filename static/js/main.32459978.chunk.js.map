{"version":3,"sources":["components/Categories.js","components/NewsItem.js","components/NewsList.js","lib/usePromise.js","pages/NewsPage.js","App.js","serviceWorker.js","index.js"],"names":["categories","name","text","CategoriesBlock","styled","div","Category","NavLink","Categories","map","c","activeClassName","exact","to","NewsItemBlock","NewsItem","article","title","description","url","urlToImage","className","href","target","rel","src","alt","NewsListBlock","NewsList","category","promiseCreator","deps","useState","loading","setLoading","resolved","setResolved","error","setError","useEffect","a","process","usePromise","query","axios","get","response","articles","data","NewsPage","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById"],"mappings":"83BAIA,IAAMA,EAAa,CACjB,CAAEC,KAAM,MAAOC,KAAM,QACrB,CAAED,KAAM,WAAYC,KAAM,YAC1B,CAAED,KAAM,gBAAiBC,KAAM,iBAC/B,CAAED,KAAM,SAAUC,KAAM,UACxB,CAAED,KAAM,UAAWC,KAAM,WACzB,CAAED,KAAM,SAAUC,KAAM,UACxB,CAAED,KAAM,aAAcC,KAAM,eAExBC,EAAkBC,IAAOC,IAAV,KAWfC,EAAWF,YAAOG,IAAPH,CAAH,KA4CCI,EAlBI,WACjB,OACE,cAACL,EAAD,UACGH,EAAWS,KAAI,SAAAC,GAAC,OACf,cAACJ,EAAD,CAEEK,gBAAgB,SAChBC,MAAgB,QAATF,EAAET,KACTY,GAAa,QAATH,EAAET,KAAe,IAAjB,WAA2BS,EAAET,MAJnC,SAMGS,EAAER,MALEQ,EAAET,Y,yfCpDjB,IAAMa,EAAgBV,IAAOC,IAAV,KAmDJU,EAtBE,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACVC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,IAAKC,EAAeJ,EAAfI,WACjC,OACE,eAACN,EAAD,WACGM,GACC,qBAAKC,UAAU,YAAf,SACE,mBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,sBAAlC,SACE,qBAAKC,IAAKL,EAAYM,IAAI,kBAIhC,sBAAKL,UAAU,WAAf,UACE,6BACE,mBAAGC,KAAMH,EAAKI,OAAO,SAASC,IAAI,sBAAlC,SACGP,MAGL,4BAAIC,W,wWC1CZ,IAAMS,EAAgBvB,IAAOC,IAAV,KAgCJuB,EAlBE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,ECnBpB,SAAqBC,EAAgBC,GAAM,IAAD,EAC1BC,oBAAS,GADiB,mBAChDC,EADgD,KACxCC,EADwC,OAEvBF,mBAAS,MAFc,mBAEhDG,EAFgD,KAEtCC,EAFsC,OAG7BJ,mBAAS,MAHoB,mBAGhDK,EAHgD,KAGzCC,EAHyC,KAmBvD,OAdAC,qBAAU,YACK,uCAAG,4BAAAC,EAAA,6DACdN,GAAW,GADG,kBAGWJ,IAHX,OAGNK,EAHM,OAIZC,EAAYD,GAJA,gDAMJG,EAAS,EAAD,IANJ,QAOdJ,GAAW,GAPG,yDAAH,oDASZO,KAGDV,GACK,CAACE,EAAQE,EAASE,GDCUK,EAAW,WAC5C,IAAMC,EAAqB,QAAbd,EAAqB,GAArB,oBAAuCA,GACrD,OAAOe,IAAMC,IAAN,yDAA4DF,EAA5D,+CACN,CAACd,IAJ6B,mBAC1BI,EAD0B,KACjBa,EADiB,KACPT,EADO,KAKjC,GAAIJ,EAAW,OAAO,cAACN,EAAD,4BACtB,IAAKmB,EAAY,OAAO,KACxB,GAAIT,EAAS,OAAO,cAACV,EAAD,kCAPa,IAQzBoB,EAAaD,EAASE,KAAtBD,SACR,OACE,cAACpB,EAAD,UACGoB,EAAStC,KAAI,SAAAO,GAAO,OACnB,cAAC,EAAD,CAA4BA,QAASA,GAAtBA,EAAQG,WEnBhB8B,EAVE,SAAC,GAAY,IACtBpB,EADqB,EAAVqB,MACKC,OAAOtB,UAAY,MACzC,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAUA,SAAUA,QCDXuB,EAJH,WACV,OAAO,cAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWL,KCO1BM,QACW,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCVJS,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.32459978.chunk.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { NavLink } from 'react-router-dom';\n// categories array 안에 name (실제 카테고리값), text (렌더링시 사용할 한글 카테고리) 값이 들어가 있는 객체들을 넣어 주어 한글로 된 카테고리와 실제 카테고리값을 연결\nconst categories = [\n  { name: 'all', text: 'HOME' },\n  { name: 'business', text: 'BUSINESS' },\n  { name: 'entertainment', text: 'ENTERTAINMENT' },\n  { name: 'health', text: 'HEALTH' },\n  { name: 'science', text: 'SCIENCE' },\n  { name: 'sports', text: 'SPORTS' },\n  { name: 'technology', text: 'TECHNOLOGY' }\n];\nconst CategoriesBlock = styled.div`\n  display: flex;\n  padding: 1rem;\n  width: 768px;\n  margin : 0 auto;\n  @media screen and (max-width:768px){\n    width: 100%;\n    overflow-x: auto;\n  }\n`;\n\nconst Category = styled(NavLink)`\n  font-size: 1.125rem;\n  cursor: pointer;\n  white-space: pre;\n  text-decoration: none;\n  color: inherit;\n  padding-bottom: 0.25rem;\n  margin-left:1rem;\n\n  &:hover{color: #495057;}\n \n\n\n&.active {\n    font-weight: 600;\n    border-bottom:2 px solid #22b8cf;\n    color:#22b8cf;\n    &:hover{\n      color: #3bc9db;\n    }\n  }\n  & + & {\n    margin-left: 1 rem;\n  }\n`;\n\nconst Categories = ()=>{\n  return (\n    <CategoriesBlock>\n      {categories.map(c => (\n        <Category\n          key={c.name}\n          activeClassName=\"active\"\n          exact={c.name==='all'}\n          to={c.name==='all' ? '/' : `/${c.name}`}\n        >\n          {c.text}\n        </Category>\n      ))}\n    </CategoriesBlock>\n  );\n};\n\n\nexport default Categories;","import React from 'react';\nimport styled from 'styled-components';\n\nconst NewsItemBlock = styled.div`\ndisplay: flex;\n  .thumbnail{\n    margin-right: 1rem;\n    img{\n      //margin-top: 10;\n      display: block;\n      width: 160px;\n      height: 100px;\n      object-fit: cover;\n  }\n}\n  .contents{\n  h2{\n    //margin-top: 10;\n    margin: 0;\n    a{ color: black; }\n  }\n  p{\n    margin: 0;\n    line-height: 1.5;\n    margin-top: 0.5rem;\n    white-space: normal;\n  }\n}\n  & +& { \n    margin-top: 3rem; \n    }\n`;\nconst NewsItem = ({ article }) => {\n  const { title, description, url, urlToImage } = article;\n  return (\n    <NewsItemBlock>\n      {urlToImage && (\n        <div className=\"thumbnail\">\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            <img src={urlToImage} alt=\"thumbnail\" />\n          </a>\n        </div>\n      )}\n      <div className=\"contents\">\n        <h2>\n          <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n            {title}\n          </a>\n        </h2>\n        <p>{description}</p>\n      </div>\n    </NewsItemBlock>\n  );\n};\nexport default NewsItem;\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport NewsItem from './NewsItem';\nimport axios from 'axios';\nimport usePromise from '../lib/usePromise';\n\n\nconst NewsListBlock = styled.div`\n  box-sizing: border-box;\n  padding-bottom: 6rem;\n  width: 768px;\n  margin: 0 auto;\n  margin-top: 4rem;\n  @media screen and(max-width: 768px){\n    width: 100%;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    //margin-top:2rem;\n  }\n`;\n\nconst NewsList = ({ category }) => {\n  const [loading, response, error] = usePromise(() => {\n    const query = category === 'all' ? '' : `&category=${category}`;\n    return axios.get(`https://newsapi.org/v2/top-headlines?country=us${query}&apiKey=10d42cc40f96409bb613b2b1cdccb5bc`,);\n  }, [category]);\n  if (loading) { return <NewsListBlock> waiting ... </NewsListBlock>; }\n  if (!response) { return null; }\n  if (error) { return <NewsListBlock> ERROR OCCURED !!! </NewsListBlock>; }\n  const { articles } = response.data;\n  return (\n    <NewsListBlock>\n      {articles.map(article => (\n        <NewsItem key={article.url} article={article} />\n      ))}\n    </NewsListBlock>\n  );\n};\n\nexport default NewsList;","import { useState, useEffect } from 'react';\n\nexport default function usePromise (promiseCreator, deps){\n  const [loading,setLoading] = useState(false);\n  const [resolved, setResolved] = useState(null);\n  const [error, setError] = useState(null);\n\n  useEffect(()=> {\n    const process = async () =>{\n      setLoading(true);\n      try{\n        const resolved = await promiseCreator();\n        setResolved(resolved);\n      }\n      catch(e){ setError(e);}\n      setLoading(false);   \n     };\n     process();\n\n\n  },deps);\n  return [loading,resolved,error];\n}","import React from 'react';\nimport Categories from '../components/Categories';\nimport NewsList from '../components/NewsList';\n\nconst NewsPage = ({match}) =>{ \n  const category= match.params.category || 'all';\n  return (\n    <>\n      <Categories />\n      <NewsList category={category} />\n    </>\n  );\n};\n\nexport default NewsPage;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport NewsPage from './pages/NewsPage';\n\nconst App = ()=>{\n  return <Route path=\"/:category?\" component={NewsPage} />;\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//serviceWorker.register();\n"],"sourceRoot":""}